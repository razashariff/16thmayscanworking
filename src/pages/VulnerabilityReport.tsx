
import React, { useState, useEffect, useRef } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/components/ui/use-toast';
import { Shield, ShieldCheck, ShieldAlert, PieChart, FileSearch, Download, FileText, ArrowLeft, Loader } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { Tables } from '@/integrations/supabase/types';
import { PieChart as RechartsChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import html2canvas from 'html2canvas';
import jsPDF from 'jspdf';

type VulnerabilityScan = Tables<"vulnerability_scans">;

interface VulnerabilityDetail {
  name: string;
  description: string;
  url: string;
  param?: string;
  solution: string;
  risk: string;
}

interface VulnerabilitySummary {
  critical?: VulnerabilityDetail[];
  high?: VulnerabilityDetail[];
  medium?: VulnerabilityDetail[];
  low?: VulnerabilityDetail[];
  informational?: VulnerabilityDetail[];
}

const VulnerabilityReport = () => {
  const { scanId } = useParams<{ scanId: string }>();
  const navigate = useNavigate();
  const [scan, setScan] = useState<VulnerabilityScan | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'critical' | 'high' | 'medium' | 'low' | 'informational'>('critical');
  const [downloadLoading, setDownloadLoading] = useState(false);
  const reportRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    const fetchScanDetails = async () => {
      if (!scanId) {
        toast({
          variant: "destructive",
          title: "Error",
          description: 'Invalid scan ID'
        });
        navigate('/vulnerability-scanner');
        return;
      }

      try {
        const { data: session } = await supabase.auth.getSession();
        if (!session.session) {
          toast({
            variant: "destructive",
            title: "Authentication Required",
            description: 'Please login to view scan reports'
          });
          navigate('/auth');
          return;
        }

        const { data, error } = await supabase
          .from('vulnerability_scans')
          .select('*')
          .eq('id', scanId)
          .single();

        if (error) {
          throw error;
        }

        if (!data) {
          toast({
            variant: "destructive",
            title: "Not Found",
            description: 'Scan not found'
          });
          navigate('/vulnerability-scanner');
          return;
        }

        // Check if scan belongs to current user
        if (data.user_id !== session.session.user.id) {
          toast({
            variant: "destructive",
            title: "Access Denied",
            description: 'You do not have access to this scan'
          });
          navigate('/vulnerability-scanner');
          return;
        }

        setScan(data);
        
        // Set active tab to highest severity with findings
        if (data.summary) {
          const summary = data.summary as VulnerabilitySummary;
          if (summary.critical?.length) {
            setActiveTab('critical');
          } else if (summary.high?.length) {
            setActiveTab('high');
          } else if (summary.medium?.length) {
            setActiveTab('medium');
          } else if (summary.low?.length) {
            setActiveTab('low');
          } else {
            setActiveTab('informational');
          }
        }
      } catch (error) {
        console.error('Error fetching scan details:', error);
        toast({
          variant: "destructive",
          title: "Error",
          description: 'Failed to load scan report'
        });
      } finally {
        setLoading(false);
      }
    };

    fetchScanDetails();
  }, [scanId, navigate]);

  const downloadReport = async () => {
    if (!reportRef.current) return;
    
    setDownloadLoading(true);
    
    try {
      const reportElement = reportRef.current;
      const canvas = await html2canvas(reportElement, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true,
      });
      
      const imgData = canvas.toDataURL('image/png');
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });
      
      const imgWidth = 210;
      const imgHeight = (canvas.height * imgWidth) / canvas.width;
      
      let position = 0;
      pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
      
      // If the report is longer than one page
      if (imgHeight > 297) {
        let heightLeft = imgHeight;
        let pageHeight = 297;
        
        while (heightLeft > 0) {
          position = heightLeft - imgHeight;
          pdf.addPage();
          pdf.addImage(imgData, 'PNG', 0, position, imgWidth, imgHeight);
          heightLeft -= pageHeight;
        }
      }
      
      pdf.save(`vulnerability-report-${scanId}.pdf`);
      
      toast({
        title: "Success",
        description: 'Report downloaded successfully'
      });
    } catch (error) {
      console.error('Error generating PDF:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: 'Failed to generate PDF. Please try again.'
      });
    } finally {
      setDownloadLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col bg-cyber-dark text-cyber-text">
        <Navbar />
        <div className="flex-grow flex items-center justify-center">
          <div className="flex flex-col items-center">
            <Shield className="h-16 w-16 text-cyber-neon animate-pulse mb-4" />
            <p className="text-cyber-muted">Loading vulnerability report...</p>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (!scan) {
    return (
      <div className="min-h-screen flex flex-col bg-cyber-dark text-cyber-text">
        <Navbar />
        <div className="flex-grow flex items-center justify-center">
          <div className="text-center">
            <ShieldAlert className="h-16 w-16 text-red-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold mb-2">Report Not Found</h2>
            <p className="text-cyber-muted mb-6">The requested vulnerability report could not be found.</p>
            <Button 
              onClick={() => navigate('/vulnerability-scanner')}
              className="bg-gradient-to-r from-cyber-blue to-cyber-purple hover:from-cyber-purple hover:to-cyber-blue"
            >
              Back to Scanner
            </Button>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  const summary = scan.summary as VulnerabilitySummary | null;
  
  const criticalCount = summary?.critical?.length || 0;
  const highCount = summary?.high?.length || 0;
  const mediumCount = summary?.medium?.length || 0;
  const lowCount = summary?.low?.length || 0;
  const infoCount = summary?.informational?.length || 0;
  
  const totalVulnerabilities = criticalCount + highCount + mediumCount + lowCount + infoCount;
  
  const chartData = [
    { name: 'Critical', value: criticalCount, color: '#991b1b' }, // red-800
    { name: 'High', value: highCount, color: '#ef4444' }, // red-500
    { name: 'Medium', value: mediumCount, color: '#f97316' }, // orange-500
    { name: 'Low', value: lowCount, color: '#eab308' }, // yellow-500
    { name: 'Info', value: infoCount, color: '#3b82f6' }, // blue-500
  ].filter(item => item.value > 0);

  const currentVulnerabilities: VulnerabilityDetail[] = summary?.[activeTab] || [];

  const getSeverityColor = (severity: string) => {
    switch (severity.toLowerCase()) {
      case 'critical': return 'bg-red-800 text-white';
      case 'high': return 'bg-red-500 text-white';
      case 'medium': return 'bg-orange-500 text-white';
      case 'low': return 'bg-yellow-500 text-black';
      case 'informational': return 'bg-blue-500 text-white';
      default: return 'bg-gray-500 text-white';
    }
  };

  return (
    <div className="min-h-screen flex flex-col bg-cyber-dark text-cyber-text">
      <Navbar />
      
      <div className="container mx-auto px-4 pt-24 pb-12 flex-grow">
        <div className="mb-6">
          <div className="flex items-center justify-between gap-4 flex-wrap">
            <div>
              <div className="inline-flex items-center px-3 py-1 rounded-full bg-cyber-purple/10 border border-cyber-purple/30 mb-4">
                <FileSearch size={16} className="text-cyber-neon mr-2" />
                <span className="text-sm">Security Report</span>
              </div>
              <h1 className="text-3xl font-bold">Vulnerability Report</h1>
            </div>
            
            <div className="flex flex-wrap gap-2">
              <Button 
                onClick={downloadReport}
                variant="outline"
                className="border-cyber-neon/30 hover:bg-cyber-neon/10"
                disabled={downloadLoading}
              >
                {downloadLoading ? (
                  <>
                    <Loader className="mr-2 h-4 w-4 animate-spin" /> Generating PDF
                  </>
                ) : (
                  <>
                    <Download className="mr-2 h-4 w-4" /> Download Report
                  </>
                )}
              </Button>
              
              <Button 
                onClick={() => navigate('/vulnerability-scanner')}
                variant="outline"
                className="border-cyber-neon/30 hover:bg-cyber-neon/10"
              >
                <ArrowLeft className="mr-2 h-4 w-4" /> Back to Scanner
              </Button>
            </div>
          </div>
        </div>

        <div ref={reportRef} className="space-y-8">
          <div className="glass-panel p-6 rounded-xl border border-cyber-neon/20">
            <div className="flex justify-between items-center mb-6">
              <h2 className="text-2xl font-bold gradient-text">Scan Summary</h2>
              <div className="px-3 py-1 rounded-full bg-cyber-neon/10 border border-cyber-neon/30 text-sm">
                Report Date: {new Date().toLocaleDateString()}
              </div>
            </div>

            <div className="grid md:grid-cols-2 gap-6">
              <div>
                <div className="space-y-3">
                  <div className="flex justify-between">
                    <span className="text-cyber-muted">Target URL</span>
                    <span className="font-mono">{scan.target_url}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-cyber-muted">Scan Date</span>
                    <span>{new Date(scan.completed_at || scan.updated_at).toLocaleString()}</span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-cyber-muted">Scan Status</span>
                    <span className={`px-2 py-0.5 rounded-full text-xs ${
                      scan.status === 'completed' 
                        ? 'bg-green-950/20 text-green-500' 
                        : 'bg-cyber-purple/20 text-cyber-purple'
                    }`}>
                      {scan.status.charAt(0).toUpperCase() + scan.status.slice(1)}
                    </span>
                  </div>
                  <div className="flex justify-between">
                    <span className="text-cyber-muted">Total Issues</span>
                    <span>{totalVulnerabilities}</span>
                  </div>
                  <div className="pt-2">
                    {criticalCount > 0 && (
                      <div className="flex justify-between text-sm mb-1">
                        <div className="flex items-center">
                          <span className="w-3 h-3 rounded-full bg-red-800 mr-2"></span>
                          <span>Critical Risk</span>
                        </div>
                        <span>{criticalCount}</span>
                      </div>
                    )}
                    <div className="flex justify-between text-sm mb-1">
                      <div className="flex items-center">
                        <span className="w-3 h-3 rounded-full bg-red-500 mr-2"></span>
                        <span>High Risk</span>
                      </div>
                      <span>{highCount}</span>
                    </div>
                    <div className="flex justify-between text-sm mb-1">
                      <div className="flex items-center">
                        <span className="w-3 h-3 rounded-full bg-orange-500 mr-2"></span>
                        <span>Medium Risk</span>
                      </div>
                      <span>{mediumCount}</span>
                    </div>
                    <div className="flex justify-between text-sm mb-1">
                      <div className="flex items-center">
                        <span className="w-3 h-3 rounded-full bg-yellow-500 mr-2"></span>
                        <span>Low Risk</span>
                      </div>
                      <span>{lowCount}</span>
                    </div>
                    <div className="flex justify-between text-sm">
                      <div className="flex items-center">
                        <span className="w-3 h-3 rounded-full bg-blue-500 mr-2"></span>
                        <span>Informational</span>
                      </div>
                      <span>{infoCount}</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="flex items-center justify-center">
                {chartData.length > 0 ? (
                  <div className="h-64 w-full">
                    <ResponsiveContainer width="100%" height="100%">
                      <RechartsChart>
                        <Pie
                          data={chartData}
                          cx="50%"
                          cy="50%"
                          innerRadius={60}
                          outerRadius={80}
                          paddingAngle={5}
                          dataKey="value"
                          label={({name, value}) => `${name}: ${value}`}
                        >
                          {chartData.map((entry, index) => (
                            <Cell key={`cell-${index}`} fill={entry.color} />
                          ))}
                        </Pie>
                        <Tooltip formatter={(value) => [`${value} issues`, 'Count']} />
                      </RechartsChart>
                    </ResponsiveContainer>
                  </div>
                ) : (
                  <div className="flex flex-col items-center justify-center text-center p-4">
                    <ShieldCheck className="h-16 w-16 text-green-500 mb-4" />
                    <h3 className="text-xl font-medium mb-2">No Vulnerabilities Found</h3>
                    <p className="text-cyber-muted">
                      This site appears to be secure. No security issues were detected in our scan.
                    </p>
                  </div>
                )}
              </div>
            </div>
          </div>

          {totalVulnerabilities > 0 && (
            <div className="glass-panel p-6 rounded-xl border border-cyber-neon/20">
              <div className="flex items-center mb-6">
                <ShieldAlert className="h-6 w-6 text-red-500 mr-2" />
                <h2 className="text-2xl font-bold">Vulnerability Details</h2>
              </div>
              
              <div className="flex border-b border-cyber-neon/20 mb-6 overflow-x-auto">
                {criticalCount > 0 && (
                  <button
                    className={`px-4 py-2 text-sm font-medium whitespace-nowrap ${activeTab === 'critical' ? 'border-b-2 border-red-800 text-red-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                    onClick={() => setActiveTab('critical')}
                  >
                    Critical Risk ({criticalCount})
                  </button>
                )}
                <button
                  className={`px-4 py-2 text-sm font-medium whitespace-nowrap ${activeTab === 'high' ? 'border-b-2 border-red-500 text-red-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                  onClick={() => setActiveTab('high')}
                  disabled={!highCount}
                >
                  High Risk ({highCount})
                </button>
                <button
                  className={`px-4 py-2 text-sm font-medium whitespace-nowrap ${activeTab === 'medium' ? 'border-b-2 border-orange-500 text-orange-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                  onClick={() => setActiveTab('medium')}
                  disabled={!mediumCount}
                >
                  Medium Risk ({mediumCount})
                </button>
                <button
                  className={`px-4 py-2 text-sm font-medium whitespace-nowrap ${activeTab === 'low' ? 'border-b-2 border-yellow-500 text-yellow-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                  onClick={() => setActiveTab('low')}
                  disabled={!lowCount}
                >
                  Low Risk ({lowCount})
                </button>
                <button
                  className={`px-4 py-2 text-sm font-medium whitespace-nowrap ${activeTab === 'informational' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                  onClick={() => setActiveTab('informational')}
                  disabled={!infoCount}
                >
                  Informational ({infoCount})
                </button>
              </div>
              
              {currentVulnerabilities.length > 0 ? (
                <div className="space-y-6">
                  {currentVulnerabilities.map((vuln, index) => (
                    <div key={index} className="border border-cyber-neon/10 rounded-lg p-4 bg-cyber-dark/50">
                      <div className="flex justify-between items-start mb-3">
                        <h3 className="text-lg font-medium">{vuln.name}</h3>
                        <span className={`px-2 py-1 rounded-full text-xs whitespace-nowrap ${getSeverityColor(activeTab)}`}>
                          {activeTab.charAt(0).toUpperCase() + activeTab.slice(1)} Risk
                        </span>
                      </div>
                      <div className="grid md:grid-cols-2 gap-4">
                        <div>
                          <h4 className="text-xs uppercase text-cyber-muted mb-1">Description</h4>
                          <p className="text-sm mb-3">{vuln.description}</p>
                          
                          <h4 className="text-xs uppercase text-cyber-muted mb-1">URL</h4>
                          <p className="text-sm font-mono break-all mb-3">{vuln.url}</p>
                          
                          {vuln.param && (
                            <>
                              <h4 className="text-xs uppercase text-cyber-muted mb-1">Parameter</h4>
                              <p className="text-sm font-mono mb-3">{vuln.param}</p>
                            </>
                          )}
                        </div>
                        
                        <div>
                          <h4 className="text-xs uppercase text-cyber-muted mb-1">Recommended Solution</h4>
                          <div className="text-sm bg-cyber-dark/30 p-3 border border-cyber-neon/10 rounded">
                            {vuln.solution}
                          </div>
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              ) : (
                <div className="text-center p-8 border border-dashed border-cyber-muted/30 rounded-lg">
                  <p className="text-cyber-muted">No {activeTab} risk vulnerabilities found.</p>
                </div>
              )}
            </div>
          )}

          <div className="glass-panel p-6 rounded-xl border border-cyber-neon/20">
            <div className="flex items-center mb-4">
              <FileText className="h-6 w-6 text-cyber-neon mr-2" />
              <h2 className="text-xl font-bold">Report Summary & Recommendations</h2>
            </div>
            
            <div className="space-y-4">
              <p>
                This security vulnerability scan was performed on <strong>{scan.target_url}</strong> on {new Date(scan.completed_at || scan.updated_at).toLocaleDateString()}.
                {totalVulnerabilities > 0 ? 
                  ` The scan identified ${totalVulnerabilities} potential security issues across multiple risk levels.` : 
                  ' The scan did not identify any security vulnerabilities.'}
              </p>
              
              {criticalCount > 0 && (
                <div className="p-3 border border-red-800/30 bg-red-900/10 rounded">
                  <h3 className="font-medium text-red-400 mb-1">Critical Risk Vulnerabilities</h3>
                  <p className="text-sm">
                    {criticalCount} critical vulnerabilities were found. These pose an immediate security risk and should be addressed as soon as possible.
                  </p>
                </div>
              )}
              
              {highCount > 0 && (
                <div className="p-3 border border-red-500/30 bg-red-500/10 rounded">
                  <h3 className="font-medium text-red-400 mb-1">High Risk Vulnerabilities</h3>
                  <p className="text-sm">
                    {highCount} high risk vulnerabilities were found. These represent significant security concerns that should be prioritized.
                  </p>
                </div>
              )}
              
              {mediumCount + lowCount > 0 && (
                <div className="p-3 border border-orange-500/30 bg-orange-500/10 rounded">
                  <h3 className="font-medium text-orange-400 mb-1">Medium and Low Risk Vulnerabilities</h3>
                  <p className="text-sm">
                    {mediumCount + lowCount} medium and low risk vulnerabilities were identified. While less urgent, addressing these will strengthen your overall security posture.
                  </p>
                </div>
              )}
              
              <div className="p-3 border border-cyber-neon/20 bg-cyber-dark/30 rounded">
                <h3 className="font-medium text-cyber-neon mb-1">Next Steps</h3>
                <ul className="list-disc pl-5 space-y-1 text-sm">
                  <li>Review and prioritize the identified vulnerabilities based on their risk level.</li>
                  <li>Develop a remediation plan for addressing the identified issues.</li>
                  <li>Consider implementing a regular vulnerability scanning routine.</li>
                  <li>After addressing critical and high-risk vulnerabilities, conduct a follow-up scan to verify fixes.</li>
                  <li>Consider a comprehensive security assessment to identify potential issues not covered by automated scanning.</li>
                </ul>
              </div>
              
              <div className="text-center p-3 border-t border-cyber-neon/10 mt-4 pt-4">
                <p className="text-sm text-cyber-muted">
                  This report was generated by CyberSec AI's automated vulnerability scanner.
                  For additional assistance or a more comprehensive security assessment, please contact our team.
                </p>
              </div>
            </div>
          </div>
        </div>
      </div>
      
      <Footer />
    </div>
  );
};

export default VulnerabilityReport;
