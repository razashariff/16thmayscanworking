import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { Shield, ShieldCheck, ShieldAlert, PieChart, FileSearch } from 'lucide-react';
import { Button } from '@/components/ui/button';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { Tables } from '@/integrations/supabase/types';
import { PieChart as RechartsChart, Pie, Cell, ResponsiveContainer, Tooltip } from 'recharts';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';

type VulnerabilityScan = Tables<"vulnerability_scans">;

interface VulnerabilitySummary {
  high?: VulnerabilityDetail[];
  medium?: VulnerabilityDetail[];
  low?: VulnerabilityDetail[];
  informational?: VulnerabilityDetail[];
}

interface VulnerabilityDetail {
  name: string;
  description: string;
  url: string;
  param: string;
  solution: string;
}

const VulnerabilityReport = () => {
  const { scanId } = useParams<{ scanId: string }>();
  const navigate = useNavigate();
  const [scan, setScan] = useState<VulnerabilityScan | null>(null);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState<'high' | 'medium' | 'low' | 'informational'>('high');

  useEffect(() => {
    const fetchScanDetails = async () => {
      if (!scanId) {
        toast.error('Invalid scan ID');
        navigate('/vulnerability-scanner');
        return;
      }

      try {
        const { data: session } = await supabase.auth.getSession();
        if (!session.session) {
          toast.error('Please login to view scan reports');
          navigate('/auth');
          return;
        }

        const { data, error } = await supabase
          .from('vulnerability_scans')
          .select('*')
          .eq('id', scanId)
          .single();

        if (error) {
          throw error;
        }

        if (!data) {
          toast.error('Scan not found');
          navigate('/vulnerability-scanner');
          return;
        }

        // Check if scan belongs to current user
        if (data.user_id !== session.session.user.id) {
          toast.error('You do not have access to this scan');
          navigate('/vulnerability-scanner');
          return;
        }

        setScan(data);
        
        // Set active tab to highest severity with findings
        if (data.summary) {
          const summary = data.summary as VulnerabilitySummary;
          if (summary.high?.length) {
            setActiveTab('high');
          } else if (summary.medium?.length) {
            setActiveTab('medium');
          } else if (summary.low?.length) {
            setActiveTab('low');
          } else {
            setActiveTab('informational');
          }
        }
      } catch (error) {
        console.error('Error fetching scan details:', error);
        toast.error('Failed to load scan report');
      } finally {
        setLoading(false);
      }
    };

    fetchScanDetails();
  }, [scanId, navigate]);

  if (loading) {
    return (
      <div className="min-h-screen flex flex-col bg-cyber-dark text-cyber-text">
        <Navbar />
        <div className="flex-grow flex items-center justify-center">
          <div className="flex flex-col items-center">
            <Shield className="h-16 w-16 text-cyber-neon animate-pulse mb-4" />
            <p className="text-cyber-muted">Loading vulnerability report...</p>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  if (!scan) {
    return (
      <div className="min-h-screen flex flex-col bg-cyber-dark text-cyber-text">
        <Navbar />
        <div className="flex-grow flex items-center justify-center">
          <div className="text-center">
            <ShieldAlert className="h-16 w-16 text-red-500 mx-auto mb-4" />
            <h2 className="text-2xl font-bold mb-2">Report Not Found</h2>
            <p className="text-cyber-muted mb-6">The requested vulnerability report could not be found.</p>
            <Button 
              onClick={() => navigate('/vulnerability-scanner')}
              className="bg-gradient-to-r from-cyber-blue to-cyber-purple hover:from-cyber-purple hover:to-cyber-blue"
            >
              Back to Scanner
            </Button>
          </div>
        </div>
        <Footer />
      </div>
    );
  }

  const summary = scan.summary as VulnerabilitySummary | null;
  
  const highCount = summary?.high?.length || 0;
  const mediumCount = summary?.medium?.length || 0;
  const lowCount = summary?.low?.length || 0;
  const infoCount = summary?.informational?.length || 0;
  
  const totalVulnerabilities = highCount + mediumCount + lowCount + infoCount;
  
  const chartData = [
    { name: 'High', value: highCount, color: '#ef4444' }, // red-500
    { name: 'Medium', value: mediumCount, color: '#f97316' }, // orange-500
    { name: 'Low', value: lowCount, color: '#eab308' }, // yellow-500
    { name: 'Info', value: infoCount, color: '#3b82f6' }, // blue-500
  ].filter(item => item.value > 0);

  const currentVulnerabilities: VulnerabilityDetail[] = summary?.[activeTab] || [];

  return (
    <div className="min-h-screen flex flex-col bg-cyber-dark text-cyber-text">
      <Navbar />
      
      <div className="container mx-auto px-4 pt-24 pb-12 flex-grow">
        <div className="mb-6">
          <div className="inline-flex items-center px-3 py-1 rounded-full bg-cyber-purple/10 border border-cyber-purple/30 mb-4">
            <FileSearch size={16} className="text-cyber-neon mr-2" />
            <span className="text-sm">Security Report</span>
          </div>
          
          <div className="flex flex-wrap items-center justify-between gap-4">
            <h1 className="text-3xl font-bold">Vulnerability Report</h1>
            <Button 
              onClick={() => navigate('/vulnerability-scanner')}
              variant="outline"
              className="border-cyber-neon/30 hover:bg-cyber-neon/10"
            >
              Back to Scanner
            </Button>
          </div>
        </div>

        <div className="glass-panel p-6 rounded-xl border border-cyber-neon/20 mb-8">
          <div className="grid md:grid-cols-2 gap-6">
            <div>
              <h2 className="text-xl font-bold mb-4">Scan Summary</h2>
              <div className="space-y-3">
                <div className="flex justify-between">
                  <span className="text-cyber-muted">Target URL</span>
                  <span className="font-mono">{scan.target_url}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-cyber-muted">Scan Date</span>
                  <span>{new Date(scan.completed_at || scan.updated_at).toLocaleString()}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-cyber-muted">Scan Status</span>
                  <span className={`px-2 py-0.5 rounded-full text-xs ${
                    scan.status === 'completed' 
                      ? 'bg-green-950/20 text-green-500' 
                      : 'bg-cyber-purple/20 text-cyber-purple'
                  }`}>
                    {scan.status.charAt(0).toUpperCase() + scan.status.slice(1)}
                  </span>
                </div>
                <div className="flex justify-between">
                  <span className="text-cyber-muted">Total Issues</span>
                  <span>{totalVulnerabilities}</span>
                </div>
                <div className="pt-2">
                  <div className="flex justify-between text-sm mb-1">
                    <div className="flex items-center">
                      <span className="w-3 h-3 rounded-full bg-red-500 mr-2"></span>
                      <span>High Risk</span>
                    </div>
                    <span>{highCount}</span>
                  </div>
                  <div className="flex justify-between text-sm mb-1">
                    <div className="flex items-center">
                      <span className="w-3 h-3 rounded-full bg-orange-500 mr-2"></span>
                      <span>Medium Risk</span>
                    </div>
                    <span>{mediumCount}</span>
                  </div>
                  <div className="flex justify-between text-sm mb-1">
                    <div className="flex items-center">
                      <span className="w-3 h-3 rounded-full bg-yellow-500 mr-2"></span>
                      <span>Low Risk</span>
                    </div>
                    <span>{lowCount}</span>
                  </div>
                  <div className="flex justify-between text-sm">
                    <div className="flex items-center">
                      <span className="w-3 h-3 rounded-full bg-blue-500 mr-2"></span>
                      <span>Informational</span>
                    </div>
                    <span>{infoCount}</span>
                  </div>
                </div>
              </div>
            </div>
            
            <div className="flex items-center justify-center">
              {chartData.length > 0 ? (
                <div className="h-64 w-full">
                  <ResponsiveContainer width="100%" height="100%">
                    <RechartsChart>
                      <Pie
                        data={chartData}
                        cx="50%"
                        cy="50%"
                        innerRadius={60}
                        outerRadius={80}
                        paddingAngle={5}
                        dataKey="value"
                        label={({name, value}) => `${name}: ${value}`}
                      >
                        {chartData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip formatter={(value) => [`${value} issues`, 'Count']} />
                    </RechartsChart>
                  </ResponsiveContainer>
                </div>
              ) : (
                <div className="flex flex-col items-center justify-center text-center p-4">
                  <ShieldCheck className="h-16 w-16 text-green-500 mb-4" />
                  <h3 className="text-xl font-medium mb-2">No Vulnerabilities Found</h3>
                  <p className="text-cyber-muted">
                    This site appears to be secure. No security issues were detected in our scan.
                  </p>
                </div>
              )}
            </div>
          </div>
        </div>

        {totalVulnerabilities > 0 && (
          <div className="glass-panel p-6 rounded-xl border border-cyber-neon/20">
            <h2 className="text-xl font-bold mb-6">Vulnerability Details</h2>
            
            <div className="flex border-b border-cyber-neon/20 mb-6">
              <button
                className={`px-4 py-2 text-sm font-medium ${activeTab === 'high' ? 'border-b-2 border-red-500 text-red-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                onClick={() => setActiveTab('high')}
                disabled={!highCount}
              >
                High Risk ({highCount})
              </button>
              <button
                className={`px-4 py-2 text-sm font-medium ${activeTab === 'medium' ? 'border-b-2 border-orange-500 text-orange-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                onClick={() => setActiveTab('medium')}
                disabled={!mediumCount}
              >
                Medium Risk ({mediumCount})
              </button>
              <button
                className={`px-4 py-2 text-sm font-medium ${activeTab === 'low' ? 'border-b-2 border-yellow-500 text-yellow-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                onClick={() => setActiveTab('low')}
                disabled={!lowCount}
              >
                Low Risk ({lowCount})
              </button>
              <button
                className={`px-4 py-2 text-sm font-medium ${activeTab === 'informational' ? 'border-b-2 border-blue-500 text-blue-500' : 'text-cyber-muted hover:text-cyber-text'}`}
                onClick={() => setActiveTab('informational')}
                disabled={!infoCount}
              >
                Informational ({infoCount})
              </button>
            </div>
            
            {currentVulnerabilities.length > 0 ? (
              <div className="space-y-6">
                {currentVulnerabilities.map((vuln, index) => (
                  <div key={index} className="border border-cyber-neon/10 rounded-lg p-4 bg-cyber-dark/50">
                    <h3 className="text-lg font-medium mb-2">{vuln.name}</h3>
                    <div className="grid md:grid-cols-2 gap-4">
                      <div>
                        <h4 className="text-xs uppercase text-cyber-muted mb-1">Description</h4>
                        <p className="text-sm mb-3">{vuln.description}</p>
                        
                        <h4 className="text-xs uppercase text-cyber-muted mb-1">URL</h4>
                        <p className="text-sm font-mono break-all mb-3">{vuln.url}</p>
                        
                        {vuln.param && (
                          <>
                            <h4 className="text-xs uppercase text-cyber-muted mb-1">Parameter</h4>
                            <p className="text-sm font-mono mb-3">{vuln.param}</p>
                          </>
                        )}
                      </div>
                      
                      <div>
                        <h4 className="text-xs uppercase text-cyber-muted mb-1">Recommended Solution</h4>
                        <p className="text-sm">{vuln.solution}</p>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            ) : (
              <div className="text-center p-8 border border-dashed border-cyber-muted/30 rounded-lg">
                <p className="text-cyber-muted">No {activeTab} risk vulnerabilities found.</p>
              </div>
            )}
          </div>
        )}

      </div>
      
      <Footer />
    </div>
  );
};

export default VulnerabilityReport;
