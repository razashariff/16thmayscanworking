
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { toast } from '@/components/ui/use-toast';
import { Shield, ShieldAlert, Loader, CheckCircle } from 'lucide-react';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Progress } from '@/components/ui/progress';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tables } from '@/integrations/supabase/types';
import { RadioGroup, RadioGroupItem } from "@/components/ui/radio-group";
import { Label } from "@/components/ui/label";
import { Card } from "@/components/ui/card";

type VulnerabilityScan = Tables<"vulnerability_scans">;

interface VulnerabilitySummary {
  high?: any[];
  medium?: any[];
  low?: any[];
  informational?: any[];
}

const VulnerabilityScanner = () => {
  const navigate = useNavigate();
  const [url, setUrl] = useState('');
  const [savedUrls, setSavedUrls] = useState<string[]>([]);
  const [selectedUrl, setSelectedUrl] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  const [isCheckingStatus, setIsCheckingStatus] = useState(false);
  const [user, setUser] = useState<any>(null);
  const [completedScans, setCompletedScans] = useState<VulnerabilityScan[]>([]);
  const [currentScanId, setCurrentScanId] = useState<string | null>(null);
  const [currentScanStatus, setCurrentScanStatus] = useState<string | null>(null);
  const [scanProgress, setScanProgress] = useState<number>(0);

  useEffect(() => {
    const getUser = async () => {
      const { data } = await supabase.auth.getSession();
      if (!data.session) {
        toast({
          variant: "destructive",
          title: "Authentication Required",
          description: "Please log in to use the vulnerability scanner"
        });
        navigate('/auth');
        return;
      }
      setUser(data.session.user);
    };
    
    getUser();
  }, [navigate]);

  useEffect(() => {
    if (!user) return;

    // Fetch completed scans and saved URLs
    const fetchData = async () => {
      // Fetch completed scans
      const { data: completedData, error: completedError } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', user.id)
        .eq('status', 'completed')
        .order('completed_at', { ascending: false });

      if (completedError) {
        console.error('Error fetching completed scans:', completedError);
        toast({
          variant: "destructive",
          title: "Error",
          description: 'Failed to load completed scans'
        });
      } else {
        setCompletedScans(completedData || []);
      }

      // Fetch saved URLs from previous scans
      const { data: urlsData, error: urlsError } = await supabase
        .from('vulnerability_scans')
        .select('target_url')
        .eq('user_id', user.id)
        .order('created_at', { ascending: false });

      if (urlsError) {
        console.error('Error fetching saved URLs:', urlsError);
      } else {
        // Extract unique URLs
        const uniqueUrls = [...new Set(urlsData?.map(item => item.target_url) || [])];
        setSavedUrls(uniqueUrls.slice(0, 3)); // Limit to 3 URLs
      }
    };

    fetchData();
    
    const channel = supabase
      .channel('scan-updates')
      .on('postgres_changes', 
        { 
          event: 'UPDATE', 
          schema: 'public', 
          table: 'vulnerability_scans',
          filter: `user_id=eq.${user.id}` 
        }, 
        (payload) => {
          console.log('Scan updated:', payload);
          // If this is our current scan, update its status
          if (payload.new.id === currentScanId) {
            setCurrentScanStatus(payload.new.status);
            setScanProgress(payload.new.progress || 0);
            
            // If completed or failed, refresh the list of completed scans
            if (payload.new.status === 'completed' || payload.new.status === 'failed') {
              fetchCompletedScans();
            }
          }
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [user, currentScanId]);

  // Function to fetch completed scans
  const fetchCompletedScans = async () => {
    if (!user) return;
    
    const { data, error } = await supabase
      .from('vulnerability_scans')
      .select('*')
      .eq('user_id', user.id)
      .eq('status', 'completed')
      .order('completed_at', { ascending: false });

    if (error) {
      console.error('Error fetching completed scans:', error);
    } else {
      setCompletedScans(data || []);
    }
  };

  // Function to check scan status manually (not auto-polling)
  const checkScanStatus = async () => {
    if (!currentScanId || !user) return;
    
    try {
      setIsCheckingStatus(true);
      
      console.log(`Manually checking status for scan ${currentScanId}`);
      
      // Pass scan_id in the body instead of URL parameters
      const { data, error } = await supabase.functions.invoke('zap-scan', {
        method: 'GET',
        headers: { 'Content-Type': 'application/json' },
        body: { scan_id: currentScanId }
      });
      
      if (error) {
        console.error('Error checking scan status:', error);
        toast({
          variant: "destructive",
          title: "Error",
          description: "Could not check scan status. Please try again."
        });
        return;
      }
      
      if (data) {
        console.log('Scan status response:', data);
        setCurrentScanStatus(data.status);
        setScanProgress(data.progress || 0);
        
        if (data.status === 'completed') {
          toast({
            title: "Scan Completed",
            description: "Vulnerability scan completed successfully!"
          });
          fetchCompletedScans();
          setCurrentScanId(null);
          setCurrentScanStatus(null);
        } else if (data.status === 'failed') {
          toast({
            variant: "destructive",
            title: "Scan Failed",
            description: data.error || "An error occurred during the scan"
          });
          setCurrentScanId(null);
          setCurrentScanStatus(null);
        }
      }
    } catch (error) {
      console.error('Error in checkScanStatus:', error);
    } finally {
      setIsCheckingStatus(false);
    }
  };

  const startScan = async () => {
    const targetUrl = selectedUrl || url;
    
    if (!targetUrl) {
      toast({
        variant: "destructive",
        title: "Validation Error",
        description: 'Please enter or select a URL to scan'
      });
      return;
    }

    try {
      new URL(targetUrl);
    } catch (e) {
      toast({
        variant: "destructive",
        title: "Validation Error",
        description: 'Please enter a valid URL with http:// or https://'
      });
      return;
    }

    setIsLoading(true);
    toast({
      title: "Processing",
      description: 'Preparing scan...'
    });

    try {
      // Create new scan record in the database
      const { data: newScan, error: insertError } = await supabase
        .from('vulnerability_scans')
        .insert({
          user_id: user.id,
          target_url: targetUrl,
          status: 'queued',
          progress: 0,
          scan_type: 'full'
        })
        .select()
        .single();

      if (insertError) throw insertError;

      console.log("Created new scan in database:", newScan);
      
      // Log the exact payload we're sending
      const payload = {
        target_url: targetUrl,
        scan_type: 'full',
        scan_id: newScan.id,
        user_id: user.id
      };
      
      console.log("Sending payload to edge function:", payload);

      // Start the scan using the edge function with explicit content type
      const { data, error } = await supabase.functions.invoke('zap-scan', {
        method: 'POST',
        body: payload,
        headers: { 'Content-Type': 'application/json' }
      });
      
      if (error) {
        console.error('Edge function error:', error);
        throw new Error(`Edge function error: ${error.message}`);
      }
      
      console.log('Scan response:', data);
      
      toast({
        title: "Success",
        description: 'Scan started successfully!'
      });
      
      setUrl('');
      setSelectedUrl(null);
      setCurrentScanId(newScan.id);
      setCurrentScanStatus('in_progress');
      setScanProgress(0);
      
      // Add the URL to saved URLs if it's not already there
      if (!savedUrls.includes(targetUrl)) {
        const newSavedUrls = [targetUrl, ...savedUrls].slice(0, 3);
        setSavedUrls(newSavedUrls);
      }
      
    } catch (error) {
      console.error('Error starting scan:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: 'Failed to start scan. Please try again.'
      });
      setCurrentScanId(null);
      setCurrentScanStatus(null);
    } finally {
      setIsLoading(false);
    }
  };

  const viewScanDetails = (scanId: string) => {
    navigate(`/vulnerability-report/${scanId}`);
  };

  return (
    <div className="min-h-screen flex flex-col bg-cyber-dark text-cyber-text">
      <Navbar />
      
      <div className="container mx-auto px-4 pt-24 pb-12 flex-grow">
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <ShieldAlert size={28} className="text-cyber-neon" />
            <h1 className="text-3xl font-bold gradient-text">Vulnerability Scanner</h1>
          </div>
          <p className="text-cyber-muted max-w-2xl">
            Scan your websites for security vulnerabilities using our advanced scanner powered by ZAP Proxy.
            Select or enter a website URL below to start a new scan.
          </p>
        </div>

        <div className="glass-panel p-6 rounded-xl border border-cyber-neon/20 mb-12">
          <h2 className="text-xl font-bold mb-4">Start a New Scan</h2>
          
          {savedUrls.length > 0 && (
            <div className="mb-6">
              <h3 className="text-sm font-medium text-cyber-muted mb-3">Select from your saved URLs:</h3>
              <RadioGroup value={selectedUrl || ""} onValueChange={setSelectedUrl}>
                {savedUrls.map((savedUrl, index) => (
                  <div className="flex items-center space-x-2 mb-2" key={index}>
                    <RadioGroupItem value={savedUrl} id={`url-${index}`} />
                    <Label htmlFor={`url-${index}`} className="cursor-pointer">{savedUrl}</Label>
                  </div>
                ))}
              </RadioGroup>
            </div>
          )}
          
          <div className="mb-4">
            <h3 className="text-sm font-medium text-cyber-muted mb-2">{savedUrls.length > 0 ? 'Or enter a new URL:' : 'Enter a website URL:'}</h3>
            <div className="flex gap-3 mb-2">
              <Input
                placeholder="https://example.com"
                value={url}
                onChange={(e) => {
                  setUrl(e.target.value);
                  setSelectedUrl(null); // Clear selection when typing
                }}
                className="bg-cyber-dark/60 border-cyber-neon/30 text-cyber-text flex-grow"
              />
              <Button 
                onClick={startScan} 
                disabled={isLoading || !user} 
                className="bg-gradient-to-r from-cyber-blue to-cyber-purple hover:from-cyber-purple hover:to-cyber-blue"
              >
                {isLoading ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : <Shield className="mr-2 h-4 w-4" />}
                Scan Website
              </Button>
            </div>
            <p className="text-xs text-cyber-muted">
              Full scans typically take 5-10 minutes depending on site complexity.
            </p>
          </div>
        </div>

        {currentScanId && currentScanStatus === 'in_progress' && (
          <Card className="mb-8 p-6 border border-cyber-purple/20 bg-cyber-dark/60">
            <div className="mb-4">
              <h2 className="text-lg font-bold mb-2">Current Scan in Progress</h2>
              <p className="text-sm text-cyber-muted">Scan ID: {currentScanId}</p>
            </div>

            <Progress value={scanProgress} className="h-2 mb-4" />
            <div className="flex justify-between text-xs text-cyber-muted mb-4">
              <span>Status: In Progress</span>
              <span>{scanProgress}% complete</span>
            </div>

            <div className="flex justify-end">
              <Button 
                onClick={checkScanStatus} 
                disabled={isCheckingStatus}
                variant="outline" 
                size="sm"
                className="border-cyber-neon/30"
              >
                {isCheckingStatus ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : null}
                Refresh Status
              </Button>
            </div>
          </Card>
        )}

        {completedScans.length > 0 && (
          <div>
            <h2 className="text-xl font-bold mb-4">Completed Scans</h2>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>URL</TableHead>
                    <TableHead>Completed</TableHead>
                    <TableHead>Vulnerabilities</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {completedScans.map((scan) => {
                    const summary = scan.summary as VulnerabilitySummary | null;
                    const highCount = summary?.high?.length || 0;
                    const mediumCount = summary?.medium?.length || 0;
                    const lowCount = summary?.low?.length || 0;
                    
                    return (
                      <TableRow key={scan.id}>
                        <TableCell className="font-medium">{scan.target_url}</TableCell>
                        <TableCell>{new Date(scan.completed_at || scan.updated_at).toLocaleString()}</TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            {highCount > 0 && (
                              <span className="text-xs px-2 py-0.5 rounded-full bg-red-950/20 text-red-500">
                                {highCount} High
                              </span>
                            )}
                            {mediumCount > 0 && (
                              <span className="text-xs px-2 py-0.5 rounded-full bg-orange-950/20 text-orange-500">
                                {mediumCount} Med
                              </span>
                            )}
                            {lowCount > 0 && (
                              <span className="text-xs px-2 py-0.5 rounded-full bg-yellow-950/20 text-yellow-500">
                                {lowCount} Low
                              </span>
                            )}
                            {highCount === 0 && mediumCount === 0 && lowCount === 0 && (
                              <span className="text-xs px-2 py-0.5 rounded-full bg-green-950/20 text-green-500">
                                No issues
                              </span>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="text-right">
                          <div className="flex items-center gap-2">
                            <Button
                              variant="outline"
                              size="sm"
                              onClick={() => viewScanDetails(scan.id)}
                            >
                              View Report
                            </Button>
                            {scan.report_path && (
                              <Button
                                variant="outline"
                                size="sm"
                                onClick={async () => {
                                  try {
                                    const { data, error } = await supabase.storage
                                      .from('scan_reports')
                                      .download(scan.report_path);
                                    
                                    if (error) throw error;
                                    
                                    const blob = new Blob([data], { type: 'text/plain' });
                                    const url = window.URL.createObjectURL(blob);
                                    const a = document.createElement('a');
                                    a.href = url;
                                    a.download = `vulnerability-report-${scan.id}.txt`;
                                    document.body.appendChild(a);
                                    a.click();
                                    window.URL.revokeObjectURL(url);
                                    document.body.removeChild(a);
                                    
                                    toast({
                                      title: "Success",
                                      description: 'Report downloaded successfully'
                                    });
                                  } catch (error) {
                                    console.error('Error downloading report:', error);
                                    toast({
                                      variant: "destructive",
                                      title: "Error",
                                      description: 'Failed to download report'
                                    });
                                  }
                                }}
                              >
                                Download Report
                              </Button>
                            )}
                          </div>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </div>
          </div>
        )}

        {!completedScans.length && !currentScanId && (
          <div className="text-center p-12 border border-dashed border-cyber-muted/30 rounded-xl">
            <Shield size={48} className="mx-auto mb-4 text-cyber-muted/50" />
            <h3 className="text-xl font-medium mb-2">No Scans Yet</h3>
            <p className="text-cyber-muted">
              Select a URL above to start your first security scan.
            </p>
          </div>
        )}
      </div>

      <Footer />
    </div>
  );
};

export default VulnerabilityScanner;
