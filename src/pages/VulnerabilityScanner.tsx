
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { supabase } from '@/integrations/supabase/client';
import { toast } from 'sonner';
import { Shield, ShieldAlert, Loader } from 'lucide-react';
import Navbar from '@/components/Navbar';
import Footer from '@/components/Footer';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Progress } from '@/components/ui/progress';
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '@/components/ui/table';
import { Tables } from '@/integrations/supabase/types';

type VulnerabilityScan = Tables<"vulnerability_scans">;

const VulnerabilityScanner = () => {
  const navigate = useNavigate();
  const [url, setUrl] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [user, setUser] = useState<any>(null);
  const [activeScans, setActiveScans] = useState<VulnerabilityScan[]>([]);
  const [completedScans, setCompletedScans] = useState<VulnerabilityScan[]>([]);

  // Check for authenticated user
  useEffect(() => {
    const getUser = async () => {
      const { data } = await supabase.auth.getSession();
      if (!data.session) {
        toast.error("Please login to use the vulnerability scanner");
        navigate('/auth');
        return;
      }
      setUser(data.session.user);
    };
    
    getUser();
  }, [navigate]);

  // Load existing scans
  useEffect(() => {
    if (!user) return;

    const fetchScans = async () => {
      // Get active scans
      const { data: activeData, error: activeError } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', user.id)
        .in('status', ['queued', 'in_progress'])
        .order('created_at', { ascending: false });

      if (activeError) {
        console.error('Error fetching active scans:', activeError);
        toast.error('Failed to load active scans');
      } else {
        setActiveScans(activeData || []);
      }

      // Get completed scans
      const { data: completedData, error: completedError } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', user.id)
        .eq('status', 'completed')
        .order('completed_at', { ascending: false });

      if (completedError) {
        console.error('Error fetching completed scans:', completedError);
        toast.error('Failed to load completed scans');
      } else {
        setCompletedScans(completedData || []);
      }
    };

    fetchScans();
    
    // Set up real-time subscription for scan updates
    const channel = supabase
      .channel('scan-updates')
      .on('postgres_changes', 
        { 
          event: 'UPDATE', 
          schema: 'public', 
          table: 'vulnerability_scans',
          filter: `user_id=eq.${user.id}` 
        }, 
        (payload) => {
          console.log('Scan updated:', payload);
          fetchScans(); // Refresh scan data
        }
      )
      .subscribe();

    return () => {
      supabase.removeChannel(channel);
    };
  }, [user]);

  // Poll active scans for updates
  useEffect(() => {
    if (!activeScans.length || !user) return;

    const interval = setInterval(async () => {
      for (const scan of activeScans) {
        if (scan.status === 'queued' || scan.status === 'in_progress') {
          try {
            // Call the ZAP API to get the current scan status
            const response = await fetch(`https://us-central1-run.app/zapscanner-service/scan/${scan.id}`, {
              method: 'GET',
              headers: {
                'Content-Type': 'application/json',
              }
            });
            
            if (!response.ok) throw new Error('Failed to get scan status');
            
            const data = await response.json();
            
            // Update scan status in database if changed
            if (data.progress !== scan.progress || data.status !== scan.status) {
              await supabase
                .from('vulnerability_scans')
                .update({
                  progress: data.progress,
                  status: data.status,
                  summary: data.results || null,
                  completed_at: data.status === 'completed' ? new Date().toISOString() : null
                })
                .eq('id', scan.id);
            }
          } catch (error) {
            console.error(`Error polling scan ${scan.id}:`, error);
          }
        }
      }
    }, 5000); // Poll every 5 seconds

    return () => clearInterval(interval);
  }, [activeScans, user]);

  const startScan = async () => {
    if (!url) {
      toast.error('Please enter a valid URL');
      return;
    }

    // Basic URL validation
    try {
      new URL(url);
    } catch (e) {
      toast.error('Please enter a valid URL with http:// or https://');
      return;
    }

    setIsLoading(true);
    toast.loading('Preparing scan...');

    try {
      // Create a new scan in the database
      const { data: newScan, error: insertError } = await supabase
        .from('vulnerability_scans')
        .insert({
          user_id: user.id,
          site_url: url,
          status: 'queued',
          progress: 0
        })
        .select()
        .single();

      if (insertError) throw insertError;

      // Start the scan with ZAP API
      const response = await fetch('https://us-central1-run.app/zapscanner-service/scan', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          target_url: url,
          scan_type: 'full',
          scan_id: newScan.id
        })
      });

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Failed to start scan: ${errorText}`);
      }

      const result = await response.json();
      toast.dismiss();
      toast.success('Scan started successfully!');
      setUrl('');

      // Refresh scans list
      const { data: activeData } = await supabase
        .from('vulnerability_scans')
        .select('*')
        .eq('user_id', user.id)
        .in('status', ['queued', 'in_progress'])
        .order('created_at', { ascending: false });

      setActiveScans(activeData || []);
    } catch (error) {
      console.error('Error starting scan:', error);
      toast.dismiss();
      toast.error('Failed to start scan. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const viewScanDetails = (scanId: string) => {
    navigate(`/vulnerability-report/${scanId}`);
  };

  return (
    <div className="min-h-screen flex flex-col bg-cyber-dark text-cyber-text">
      <Navbar />
      
      <div className="container mx-auto px-4 pt-24 pb-12 flex-grow">
        <div className="mb-8">
          <div className="flex items-center gap-3 mb-4">
            <ShieldAlert size={28} className="text-cyber-neon" />
            <h1 className="text-3xl font-bold gradient-text">Vulnerability Scanner</h1>
          </div>
          <p className="text-cyber-muted max-w-2xl">
            Scan your websites for security vulnerabilities using our advanced scanner powered by ZAP Proxy.
            Enter your website URL below to start a new scan.
          </p>
        </div>

        <div className="glass-panel p-6 rounded-xl border border-cyber-neon/20 mb-12">
          <h2 className="text-xl font-bold mb-4">Start a New Scan</h2>
          <div className="flex gap-3 mb-2">
            <Input
              placeholder="https://example.com"
              value={url}
              onChange={(e) => setUrl(e.target.value)}
              className="bg-cyber-dark/60 border-cyber-neon/30 text-cyber-text flex-grow"
            />
            <Button 
              onClick={startScan} 
              disabled={isLoading || !user} 
              className="bg-gradient-to-r from-cyber-blue to-cyber-purple hover:from-cyber-purple hover:to-cyber-blue"
            >
              {isLoading ? <Loader className="mr-2 h-4 w-4 animate-spin" /> : <Shield className="mr-2 h-4 w-4" />}
              Scan Website
            </Button>
          </div>
          <p className="text-xs text-cyber-muted">
            Full scans typically take 5-10 minutes depending on site complexity.
          </p>
        </div>

        {activeScans.length > 0 && (
          <div className="mb-12">
            <h2 className="text-xl font-bold mb-4">Active Scans</h2>
            <div className="grid gap-4">
              {activeScans.map((scan) => (
                <div key={scan.id} className="glass-panel p-4 rounded-xl border border-cyber-purple/20">
                  <div className="flex justify-between items-center mb-2">
                    <h3 className="font-medium">{scan.site_url}</h3>
                    <span className="text-xs px-2 py-1 rounded-full bg-cyber-purple/20 text-cyber-purple">
                      {scan.status === 'queued' ? 'Queued' : 'In Progress'}
                    </span>
                  </div>
                  <Progress value={scan.progress} className="h-2 mb-1" />
                  <div className="flex justify-between items-center text-xs text-cyber-muted">
                    <span>Started: {new Date(scan.created_at).toLocaleString()}</span>
                    <span>{scan.progress}% complete</span>
                  </div>
                </div>
              ))}
            </div>
          </div>
        )}

        {completedScans.length > 0 && (
          <div>
            <h2 className="text-xl font-bold mb-4">Completed Scans</h2>
            <div className="overflow-x-auto">
              <Table>
                <TableHeader>
                  <TableRow>
                    <TableHead>URL</TableHead>
                    <TableHead>Completed</TableHead>
                    <TableHead>Vulnerabilities</TableHead>
                    <TableHead className="text-right">Actions</TableHead>
                  </TableRow>
                </TableHeader>
                <TableBody>
                  {completedScans.map((scan) => {
                    // Count vulnerabilities by severity
                    const highCount = scan.summary?.high?.length || 0;
                    const mediumCount = scan.summary?.medium?.length || 0;
                    const lowCount = scan.summary?.low?.length || 0;
                    
                    return (
                      <TableRow key={scan.id}>
                        <TableCell className="font-medium">{scan.site_url}</TableCell>
                        <TableCell>{new Date(scan.completed_at || scan.updated_at).toLocaleString()}</TableCell>
                        <TableCell>
                          <div className="flex gap-2">
                            {highCount > 0 && (
                              <span className="text-xs px-2 py-0.5 rounded-full bg-red-950/20 text-red-500">
                                {highCount} High
                              </span>
                            )}
                            {mediumCount > 0 && (
                              <span className="text-xs px-2 py-0.5 rounded-full bg-orange-950/20 text-orange-500">
                                {mediumCount} Med
                              </span>
                            )}
                            {lowCount > 0 && (
                              <span className="text-xs px-2 py-0.5 rounded-full bg-yellow-950/20 text-yellow-500">
                                {lowCount} Low
                              </span>
                            )}
                            {highCount === 0 && mediumCount === 0 && lowCount === 0 && (
                              <span className="text-xs px-2 py-0.5 rounded-full bg-green-950/20 text-green-500">
                                No issues
                              </span>
                            )}
                          </div>
                        </TableCell>
                        <TableCell className="text-right">
                          <Button
                            variant="outline"
                            size="sm"
                            onClick={() => viewScanDetails(scan.id)}
                            className="border-cyber-neon/30 hover:bg-cyber-neon/10"
                          >
                            View Report
                          </Button>
                        </TableCell>
                      </TableRow>
                    );
                  })}
                </TableBody>
              </Table>
            </div>
          </div>
        )}

        {!activeScans.length && !completedScans.length && (
          <div className="text-center p-12 border border-dashed border-cyber-muted/30 rounded-xl">
            <Shield size={48} className="mx-auto mb-4 text-cyber-muted/50" />
            <h3 className="text-xl font-medium mb-2">No Scans Yet</h3>
            <p className="text-cyber-muted">
              Enter a URL above to start your first security scan.
            </p>
          </div>
        )}
      </div>

      <Footer />
    </div>
  );
};

export default VulnerabilityScanner;
